{"version":3,"sources":["registerServiceWorker.js","stores/storage.js","stores/store.js","index.js","stores/store-worker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Storage","key","Object","classCallCheck","this","defineProperty","_key","writable","value","classPrivateFieldLooseBase","values","storage","setItem","removeItem","getItem","_this","mystorage","objectSpread","localStorage","assign","JSON","stringify","parse","store","createStore","StoreWorker","Footer","lazy","Promise","all","__webpack_require__","e","bind","App","id","element","react_default","a","createElement","unistore_react","react","fallback","forEach","DOMElement","document","setAttribute","body","appendChild","render","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","Worker","p"],"mappings":"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","file":"static/js/main.c73ed5c3.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","class Storage {\n  #key\n  constructor(key) {\n    this.#key = key\n  }\n\n  get storage() {\n    const mystorage = { ...window.localStorage }\n    Object.assign(mystorage, {\n      setItem: (key, values) => {\n        return window.localStorage.setItem(key, JSON.stringify(values))\n      },\n      removeItem: () => window.localStorage.removeItem(this.#key),\n      getItem: () =>\n        window.localStorage.getItem(this.#key)\n          ? JSON.parse(window.localStorage.getItem(this.#key))\n          : null,\n    })\n    return mystorage\n  }\n\n  save(values) {\n    this.storage.setItem(this.#key, values)\n  }\n\n  remove() {\n    this.storage.removeItem()\n  }\n\n  get() {\n    return this.storage.getItem()\n  }\n}\n\nconst mystorage = new Storage('app_state')\n\nexport default mystorage\n","import createStore from 'stockroom'\n// import createStore from 'unistore'\nimport StoreWorker from 'worker-loader!./store-worker' // eslint-disable-line import/no-webpack-loader-syntax\n// import StoreWorker from 'workerize-loader!./store-worker' // eslint-disable-line import/no-webpack-loader-syntax\nimport devtools from 'unistore/devtools'\nimport Storage from './storage'\n\nconst {\n  //  REACT_APP_USE_WORKER,\n  NODE_ENV,\n} = process.env\n\nlet store\n\nif (NODE_ENV === 'production') {\n  store = createStore(new StoreWorker())\n} else {\n  store = createStore(new StoreWorker())\n  Storage.get() && store.setState(Storage.get(), true)\n  store.subscribe(e => {\n    console.log(e)\n    Storage.save(e)\n    console.log('has saved in localstorage')\n  })\n  store = devtools(store)\n}\n\nexport default store\n","import React, { Suspense, lazy } from 'react'\nimport { render } from 'react-dom'\nimport 'antd/dist/antd.css'\nimport './index.css'\n// import App from './App'\nimport registerServiceWorker from './registerServiceWorker'\nimport { Provider } from 'unistore/react'\nimport store from 'stores/store'\nconst Footer = lazy(() => import('components/Footer'))\nconst App = lazy(() => import('./App'))\n\n/**\n * Another Way React Renderring\n * @author ri7nz <ri7nz.labs@gmail.com>\n */\nconst elementRendered = [\n  {\n    id: 'app',\n    element: (\n      <Provider store={store}>\n        <Suspense fallback={<div>Loading...</div>}>\n          <App />\n        </Suspense>\n      </Provider>\n    ),\n  },\n  {\n    id: 'footer',\n    element: (\n      <Suspense fallback={<div>{''}</div>}>\n        <Footer />\n      </Suspense>\n    ),\n  },\n  // {\n  //  id: 'app',\n  //  element: (\n  //    <div>Header</div>\n  //  ),\n  // },\n]\n\nelementRendered.forEach(element => {\n  const DOMElement = document.createElement('div')\n  DOMElement.setAttribute('id', element.id)\n  document.body.appendChild(DOMElement)\n  render(element.element, document.getElementById(element.id))\n})\n\nregisterServiceWorker()\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"1b0574649365c23f4489.worker.js\");\n};"],"sourceRoot":""}